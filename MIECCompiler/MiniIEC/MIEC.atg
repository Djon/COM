#include "DACGenerator.h"
#include "SymbolFactory.h"
#include <wchar.h>

COMPILER MIEC

	DACGenerator mDACGen;

	void Error(wchar_t* const msg) {
		errors->Error(la->line, la->col, msg);
	}

CHARACTERS
  letter = 'A' .. 'Z' + 'a' .. 'z' .
  digit = '0' .. '9' .
  cr = '\r' .
  lf = '\n' .
  tab = '\t' .

    
TOKENS
  ident = letter { letter | digit } .
  number = digit {digit} .
    
COMMENTS
  FROM "(*" TO "*)" NESTED

IGNORE cr + lf + tab
   
PRODUCTIONS

MIEC = "PROGRAM" ident							(. mDACGen.SetParser(this); .)							
	   [ VarDeclList ]
	   "BEGIN"
	   Statements
	   SYNC "END"								(. mDACGen.AddStatement(OpKind::eExit, 0, 0); .)									
	   .

VarDeclList = "BEGIN_VAR"						(. size_t addr = 0; .)
		   VarDecl<addr>
		 { VarDecl<addr>
		 } 
		   "END_VAR"
		 .

VarDecl<size_t &addr>					(. wchar_t* name = 0; DataType * pType = 0; .)
	= Ident<name>
	  ":"
	  Type<pType>
	  ";"								(. if (mDACGen.AddSymbol(new VarSymbol(name, pType, addr))) { addr += pType->GetSize(); } .)
	.


Statements = Stat {Stat} .
Stat									(. Symbol* pSym = 0; .)
= (
	Assignment<pSym> |
	Branch<pSym> |
	Loop<pSym> |
	Print<pSym>
  )
.								


Assignment<Symbol* &pSym>				(. wchar_t* pName = 0; Symbol* pSym1 = 0; .)
	= Ident<pName>						(. pSym = mDACGen.FindSymbol(pName); .)
	  ":=" Expr<pSym1>
	  SYNC ';'							(. pSym = mDACGen.AddStatement(OpKind::eAssign, pSym, pSym1); .)
	.

Branch<Symbol* &pSym>					(. Label* lbElse = mDACGen.CreateLabel(); Label* lbNext = mDACGen.CreateLabel(); .)
= "IF" Condition<pSym>
	"THEN"								(. mDACGen.AddStatement(OpKind::eIfFalseJump, pSym, lbElse); .)
	Statements
[ 
	"ELSE"								(. mDACGen.AddStatement(OpKind::eJump, lbNext, 0); .)
	Statements							(. mDACGen.RegisterLabel(lbNext); .)					
] 
	SYNC "END"							(. mDACGen.RegisterLabel(lbElse); .)							
.

Loop<Symbol* &pSym>						(. Label* lbCondition = mDACGen.CreateLabel(); Label* lbNext = mDACGen.CreateLabel(); .)
	= "WHILE"							(. mDACGen.RegisterLabel(lbCondition); .)
	  Condition<pSym>
	  "DO"								(. mDACGen.AddStatement(OpKind::eIfFalseJump, pSym, lbNext); .)
	  Statements						(. mDACGen.AddStatement(OpKind::eJump, lbCondition, 0); .)
	  SYNC "END"						(. mDACGen.RegisterLabel(lbNext); .)
	.

Print<Symbol* &pSym>
	= "print"
	  '(' 
	  Expr<pSym>  
	  SYNC ')'
	  ';'								(. pSym = mDACGen.AddStatement(OpKind::ePrint, pSym, 0); .)
	.


Condition<Symbol* &pSym>				(. OpKind op = OpKind::eNone; Symbol* pSym1 = 0; .)
= Expr<pSym>
	Relop<op>
	Expr<pSym1>							(. pSym = mDACGen.AddStatement(op, pSym, pSym1); .)
.

Relop<OpKind &op>
= "=" 								(. op = OpKind::eIsEqual; .)
 |"<=" 								(. op = OpKind::eIsLessEqual; .)
 |">=" 								(. op = OpKind::eIsGreaterEqual; .)
 |"!=" 								(. op = OpKind::eIsNotEqual; .)
 |"<"  								(. op = OpKind::eIsLess; .)
 |">"								(. op = OpKind::eIsGreater; .)
.

Expr<Symbol* &pSym>						(. OpKind op = eNone; Symbol* pSym1 = 0; .)
= Term<pSym> 
{ 
	( 
		'+'								(. op = OpKind::eAdd; .)
		| '-'							(. op = OpKind::eSubtract; .)								
	)
	Term<pSym1>							(. pSym = mDACGen.AddStatement(op, pSym, pSym1); .)
} 
.

Term<Symbol* &pSym>						(. OpKind op = OpKind::eNone; Symbol* pSym1 = 0; .)
= Fact<pSym>
{ 
	( 
	'*'									(. op = OpKind::eMultiply; .)
	| '/'								(. op = OpKind::eDivide; .)
	)
	Fact<pSym1>							(. pSym = mDACGen.AddStatement(op, pSym, pSym1); .)
}
.

Fact<Symbol* &pSym>
= 
( 
	ident							(. pSym = mDACGen.FindSymbol(t->val); .)
	| number						(. int val; swscanf(t->val, L"%i", &val); pSym = mDACGen.AddSymbol(new ConstIntSymbol(t->val, mDACGen.GetDataType(L"Integer"), val)); .)
	| "(" Expr<pSym> SYNC ")"
)									(. mDACGen.SetPosition(t->line); .)									
.	

Type<DataType* &pType>
	= ( "Integer"		(. pType = mDACGen.FindSymbol(INT_NAME)->GetDataType(); .) 
	| "Boolean"			(. pType = mDACGen.FindSymbol(BOOLEAN_NAME)->GetDataType(); .) 
	| ANY				(. Error(L"Unknown Type Symbol"); .)
	)					(. mDACGen.SetPosition(t->line); .)
	.

Ident<wchar_t* &name>
	= ( ident			(. name =  t->val; .)
	| number
	  )					(. mDACGen.SetPosition(t->line); .)		
	.

END MIEC .